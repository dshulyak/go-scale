// Code generated by github.com/spacemeshos/go-scale/gen. DO NOT EDIT.

package types

import (
	"github.com/spacemeshos/go-scale"
)

func (t *SpawnMulti) EncodeScale(enc *scale.Encoder) (total int, err error) {
	// field Type (0)
	if n, err := scale.EncodeCompact8(enc, t.Type); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Body (1)
	if n, err := t.Body.EncodeScale(enc); err != nil {
		return total, err
	} else {
		total += n
	}

	return total, nil
}

func (t *SpawnMulti) DecodeScale(dec *scale.Decoder) (total int, err error) {
	// field Type (0)
	if field, n, err := scale.DecodeCompact8(dec); err != nil {
		return total, err
	} else {
		total += n
		t.Type = field
	}

	// field Body (1)
	if n, err := t.Body.DecodeScale(dec); err != nil {
		return total, err
	} else {
		total += n
	}

	return total, nil
}

func (t *SpawnMultiBody) EncodeScale(enc *scale.Encoder) (total int, err error) {
	// field Address (0)
	if n, err := t.Address.EncodeScale(enc); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Selector (1)
	if n, err := scale.EncodeCompact8(enc, t.Selector); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Payload (2)
	if n, err := t.Payload.EncodeScale(enc); err != nil {
		return total, err
	} else {
		total += n
	}

	return total, nil
}

func (t *SpawnMultiBody) DecodeScale(dec *scale.Decoder) (total int, err error) {
	// field Address (0)
	if n, err := t.Address.DecodeScale(dec); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Selector (1)
	if field, n, err := scale.DecodeCompact8(dec); err != nil {
		return total, err
	} else {
		total += n
		t.Selector = field
	}

	// field Payload (2)
	if n, err := t.Payload.DecodeScale(dec); err != nil {
		return total, err
	} else {
		total += n
	}

	return total, nil
}

func (t *SpawnMultiPayload) EncodeScale(enc *scale.Encoder) (total int, err error) {
	// field Template (0)
	if n, err := t.Template.EncodeScale(enc); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Keys (1)
	if n, err := scale.EncodeStructArray(enc, t.Keys[:]); err != nil {
		return total, err
	} else {
		total += n
	}

	// field GasPrice (2)
	if n, err := scale.EncodeCompact32(enc, t.GasPrice); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Signatures (3)
	if n, err := t.Signatures.EncodeScale(enc); err != nil {
		return total, err
	} else {
		total += n
	}

	return total, nil
}

func (t *SpawnMultiPayload) DecodeScale(dec *scale.Decoder) (total int, err error) {
	// field Template (0)
	if n, err := t.Template.DecodeScale(dec); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Keys (1)
	if n, err := scale.DecodeStructArray(dec, t.Keys[:]); err != nil {
		return total, err
	} else {
		total += n
	}

	// field GasPrice (2)
	if field, n, err := scale.DecodeCompact32(dec); err != nil {
		return total, err
	} else {
		total += n
		t.GasPrice = field
	}

	// field Signatures (3)
	if n, err := t.Signatures.DecodeScale(dec); err != nil {
		return total, err
	} else {
		total += n
	}

	return total, nil
}

func (t *MultiSig) EncodeScale(enc *scale.Encoder) (total int, err error) {
	// field SigConf (0)
	if n, err := scale.EncodeCompact8(enc, t.SigConf); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Signatures (1)
	if n, err := scale.EncodeStructArray(enc, t.Signatures[:]); err != nil {
		return total, err
	} else {
		total += n
	}

	return total, nil
}

func (t *MultiSig) DecodeScale(dec *scale.Decoder) (total int, err error) {
	// field SigConf (0)
	if field, n, err := scale.DecodeCompact8(dec); err != nil {
		return total, err
	} else {
		total += n
		t.SigConf = field
	}

	// field Signatures (1)
	if n, err := scale.DecodeStructArray(dec, t.Signatures[:]); err != nil {
		return total, err
	} else {
		total += n
	}

	return total, nil
}

func (t *SpendMulti) EncodeScale(enc *scale.Encoder) (total int, err error) {
	// field Type (0)
	if n, err := scale.EncodeCompact8(enc, t.Type); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Body (1)
	if n, err := t.Body.EncodeScale(enc); err != nil {
		return total, err
	} else {
		total += n
	}

	return total, nil
}

func (t *SpendMulti) DecodeScale(dec *scale.Decoder) (total int, err error) {
	// field Type (0)
	if field, n, err := scale.DecodeCompact8(dec); err != nil {
		return total, err
	} else {
		total += n
		t.Type = field
	}

	// field Body (1)
	if n, err := t.Body.DecodeScale(dec); err != nil {
		return total, err
	} else {
		total += n
	}

	return total, nil
}

func (t *SpendMultiBody) EncodeScale(enc *scale.Encoder) (total int, err error) {
	// field Address (0)
	if n, err := t.Address.EncodeScale(enc); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Selector (1)
	if n, err := scale.EncodeCompact8(enc, t.Selector); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Payload (2)
	if n, err := t.Payload.EncodeScale(enc); err != nil {
		return total, err
	} else {
		total += n
	}

	return total, nil
}

func (t *SpendMultiBody) DecodeScale(dec *scale.Decoder) (total int, err error) {
	// field Address (0)
	if n, err := t.Address.DecodeScale(dec); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Selector (1)
	if field, n, err := scale.DecodeCompact8(dec); err != nil {
		return total, err
	} else {
		total += n
		t.Selector = field
	}

	// field Payload (2)
	if n, err := t.Payload.DecodeScale(dec); err != nil {
		return total, err
	} else {
		total += n
	}

	return total, nil
}

func (t *SpendMultiPayload) EncodeScale(enc *scale.Encoder) (total int, err error) {
	// field Arguments (0)
	if n, err := t.Arguments.EncodeScale(enc); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Nonce (1)
	if n, err := t.Nonce.EncodeScale(enc); err != nil {
		return total, err
	} else {
		total += n
	}

	// field GasPrice (2)
	if n, err := scale.EncodeCompact64(enc, t.GasPrice); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Signatures (3)
	if n, err := t.Signatures.EncodeScale(enc); err != nil {
		return total, err
	} else {
		total += n
	}

	return total, nil
}

func (t *SpendMultiPayload) DecodeScale(dec *scale.Decoder) (total int, err error) {
	// field Arguments (0)
	if n, err := t.Arguments.DecodeScale(dec); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Nonce (1)
	if n, err := t.Nonce.DecodeScale(dec); err != nil {
		return total, err
	} else {
		total += n
	}

	// field GasPrice (2)
	if field, n, err := scale.DecodeCompact64(dec); err != nil {
		return total, err
	} else {
		total += n
		t.GasPrice = field
	}

	// field Signatures (3)
	if n, err := t.Signatures.DecodeScale(dec); err != nil {
		return total, err
	} else {
		total += n
	}

	return total, nil
}
