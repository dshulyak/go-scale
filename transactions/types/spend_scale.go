// Code generated by github.com/spacemeshos/go-scale/gen. DO NOT EDIT.

package types

import (
	"github.com/spacemeshos/go-scale"
)

func (t *Spend) EncodeScale(enc *scale.Encoder) (total int, err error) {
	// field Type (0)
	if n, err := scale.EncodeCompact8(enc, t.Type); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Body (1)
	if n, err := t.Body.EncodeScale(enc); err != nil {
		return total, err
	} else {
		total += n
	}

	return total, nil
}

func (t *Spend) DecodeScale(dec *scale.Decoder) (total int, err error) {
	// field Type (0)
	if field, n, err := scale.DecodeCompact8(dec); err != nil {
		return total, err
	} else {
		total += n
		t.Type = field
	}

	// field Body (1)
	if n, err := t.Body.DecodeScale(dec); err != nil {
		return total, err
	} else {
		total += n
	}

	return total, nil
}

func (t *SpendBody) EncodeScale(enc *scale.Encoder) (total int, err error) {
	// field Adress (0)
	if n, err := t.Adress.EncodeScale(enc); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Selector (1)
	if n, err := scale.EncodeCompact8(enc, t.Selector); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Payload (2)
	if n, err := t.Payload.EncodeScale(enc); err != nil {
		return total, err
	} else {
		total += n
	}

	return total, nil
}

func (t *SpendBody) DecodeScale(dec *scale.Decoder) (total int, err error) {
	// field Adress (0)
	if n, err := t.Adress.DecodeScale(dec); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Selector (1)
	if field, n, err := scale.DecodeCompact8(dec); err != nil {
		return total, err
	} else {
		total += n
		t.Selector = field
	}

	// field Payload (2)
	if n, err := t.Payload.DecodeScale(dec); err != nil {
		return total, err
	} else {
		total += n
	}

	return total, nil
}

func (t *SpendPayload) EncodeScale(enc *scale.Encoder) (total int, err error) {
	// field Arguments (0)
	if n, err := t.Arguments.EncodeScale(enc); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Nonce (1)
	if n, err := t.Nonce.EncodeScale(enc); err != nil {
		return total, err
	} else {
		total += n
	}

	// field GasPrice (2)
	if n, err := scale.EncodeCompact32(enc, t.GasPrice); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Signature (3)
	if n, err := t.Signature.EncodeScale(enc); err != nil {
		return total, err
	} else {
		total += n
	}

	return total, nil
}

func (t *SpendPayload) DecodeScale(dec *scale.Decoder) (total int, err error) {
	// field Arguments (0)
	if n, err := t.Arguments.DecodeScale(dec); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Nonce (1)
	if n, err := t.Nonce.DecodeScale(dec); err != nil {
		return total, err
	} else {
		total += n
	}

	// field GasPrice (2)
	if field, n, err := scale.DecodeCompact32(dec); err != nil {
		return total, err
	} else {
		total += n
		t.GasPrice = field
	}

	// field Signature (3)
	if n, err := t.Signature.DecodeScale(dec); err != nil {
		return total, err
	} else {
		total += n
	}

	return total, nil
}

func (t *SpendMethodArguments) EncodeScale(enc *scale.Encoder) (total int, err error) {
	// field Recipient (0)
	if n, err := t.Recipient.EncodeScale(enc); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Amount (1)
	if n, err := scale.EncodeCompact64(enc, t.Amount); err != nil {
		return total, err
	} else {
		total += n
	}

	return total, nil
}

func (t *SpendMethodArguments) DecodeScale(dec *scale.Decoder) (total int, err error) {
	// field Recipient (0)
	if n, err := t.Recipient.DecodeScale(dec); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Amount (1)
	if field, n, err := scale.DecodeCompact64(dec); err != nil {
		return total, err
	} else {
		total += n
		t.Amount = field
	}

	return total, nil
}

func (t *SpendNonceFields) EncodeScale(enc *scale.Encoder) (total int, err error) {
	// field Counter (0)
	if n, err := scale.EncodeCompact32(enc, t.Counter); err != nil {
		return total, err
	} else {
		total += n
	}

	// field Bitfield (1)
	if n, err := scale.EncodeCompact64(enc, t.Bitfield); err != nil {
		return total, err
	} else {
		total += n
	}

	return total, nil
}

func (t *SpendNonceFields) DecodeScale(dec *scale.Decoder) (total int, err error) {
	// field Counter (0)
	if field, n, err := scale.DecodeCompact32(dec); err != nil {
		return total, err
	} else {
		total += n
		t.Counter = field
	}

	// field Bitfield (1)
	if field, n, err := scale.DecodeCompact64(dec); err != nil {
		return total, err
	} else {
		total += n
		t.Bitfield = field
	}

	return total, nil
}
